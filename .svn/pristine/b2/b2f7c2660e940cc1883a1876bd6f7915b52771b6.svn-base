package kr.or.ddit.cstmr.rsvt.controller;

import java.sql.Date;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import kr.or.ddit.cstmr.rsvt.service.CstmrRsvtRetrieveService;
import kr.or.ddit.cstmr.rsvt.service.CstmrRsvtService;
import kr.or.ddit.global.security.MberUser;
import kr.or.ddit.global.security.MberVOWrapper;
import kr.or.ddit.global.vo.CstmrVO;
import kr.or.ddit.global.vo.MberVO;
import kr.or.ddit.global.vo.RsvtDetailsVO;
import kr.or.ddit.global.vo.RsvtVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("cstmr/rsvt")
public class CstmrRsvtRetrieveController {

	@Inject
	private CstmrRsvtRetrieveService service;

	@GetMapping("rsvtList")
	public String rsvtList(Model model, Authentication authentication) {
		// 비회과 회원을 구분하기 위해 authentication으로 인증유무 확인, 현재 사용자의 정보를 가져와 mberVo의 인스턴스인지 확인
		if (authentication != null && authentication.getPrincipal() instanceof MberVOWrapper) {
			MberVO mber = ((MberVOWrapper) authentication.getPrincipal()).getMberUser();

			if (mber != null) {
				LocalDate checkin;
				LocalDate checkout;
				long rsvtDay;

				String cstNo = mber.getCstNo();
				List<RsvtVO> mberRsvtList = service.retrieveMberRsvt(cstNo);
				List<RsvtVO> mberEndRsvtList = service.retrieveMberEndRsvt(cstNo);
				List<RsvtVO> mberCancelRsvtList = service.retrieveMberCancelRsvt(cstNo);

				List<RsvtDetailsVO> rsvtDetailList;
				String rsvtNo;
				int rsvtCnt = mberRsvtList.size();
				int endRsvtCnt = mberEndRsvtList.size();
				int cancelRsvtCnt = mberCancelRsvtList.size();

				for (int i = 0; i < rsvtCnt; i++) {
					checkin = mberRsvtList.get(i).getRsvtCheckinYmd();
					checkout = mberRsvtList.get(i).getRsvtCheckoutYmd();
					rsvtDay = ChronoUnit.DAYS.between(checkin, checkout);

					mberRsvtList.get(i).setRsvtDay(rsvtDay);
					rsvtNo = mberRsvtList.get(i).getRsvtNo();
					rsvtDetailList = service.retrieveRsvtDetails(rsvtNo);

					mberRsvtList.get(i).setRsvtDetails(rsvtDetailList);
					log.info("@@@@@mberRsvtList:{}",mberRsvtList);
					model.addAttribute("mberRsvtList", mberRsvtList);
				}

				for (int j = 0; j < endRsvtCnt; j++) {
					checkin = mberEndRsvtList.get(j).getRsvtCheckinYmd();
					checkout = mberEndRsvtList.get(j).getRsvtCheckoutYmd();
					rsvtDay = ChronoUnit.DAYS.between(checkin, checkout);
					
					mberEndRsvtList.get(j).setRsvtDay(rsvtDay);
					rsvtNo = mberEndRsvtList.get(j).getRsvtNo();
					rsvtDetailList = service.retrieveEndRsvtDetails(rsvtNo);
					
					mberEndRsvtList.get(j).setRsvtDetails(rsvtDetailList);
					
					model.addAttribute("mberEndRsvtList", mberEndRsvtList);
					log.info("@@@@@mberEndRsvtList:{}",mberEndRsvtList);
				}

				for (int k = 0; k < cancelRsvtCnt; k++) {
					checkin = mberCancelRsvtList.get(k).getRsvtCheckinYmd();
					checkout = mberCancelRsvtList.get(k).getRsvtCheckoutYmd();
					rsvtDay = ChronoUnit.DAYS.between(checkin, checkout);
					
					mberCancelRsvtList.get(k).setRsvtDay(rsvtDay);
					rsvtNo = mberCancelRsvtList.get(k).getRsvtNo();
					rsvtDetailList = service.retrieveEndRsvtDetails(rsvtNo);
					
					mberCancelRsvtList.get(k).setRsvtDetails(rsvtDetailList);
					
					model.addAttribute("mberCancelRsvtList", mberCancelRsvtList);
					log.info("@@@@@mbercancel:{}",mberCancelRsvtList);
				}

				return "cstmr/rsvt/rsvtMberView";
			}
		}
		return "cstmr/rsvt/rsvtList";
	}

	@GetMapping("rsvtNberView")
	public String rsvtNberView() {
		return "cstmr/rsvt/rsvtNberView";
	}

	@GetMapping("rsvtMberView")
	public String rsvtMberView() {
		return "cstmr/rsvt/rsvtMberView";
	}

	@PostMapping("rsvtNberView")
	public String rsvtNberView(@ModelAttribute CstmrVO cstmrVO, Model model) {
		List<RsvtVO> rsvtList = null;
		if (cstmrVO.getCstNo().isEmpty()) {

			rsvtList = (List<RsvtVO>) service.retrieveNberRsvt(cstmrVO);
		} else {

			rsvtList = service.retrieveMberRsvt(cstmrVO.getCstNo());
		}

		log.info("rsvtList@@@@:{}", rsvtList);

		model.addAttribute("rsvtList", rsvtList);

		return "redirect:rsvtView";
	}
}
