package kr.or.ddit.emp.hrm.empnotice.controller;

import java.security.Principal;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.emp.hrm.empnotice.service.HrmEmpNoticeSevice;
import kr.or.ddit.global.common.paging.BootstrapFormBasePaginationRenderer;
import kr.or.ddit.global.common.paging.PaginationInfo;
import kr.or.ddit.global.common.paging.PaginationRenderer;
import kr.or.ddit.global.security.EmpUser;
import kr.or.ddit.global.vo.EmpNoticeVO;
import kr.or.ddit.global.vo.EmpVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
public class HrmEmpNoticeController {

	@Inject
	private HrmEmpNoticeSevice service;
	
	@GetMapping(value = "/emp/hrm/empnotice/insert")
	public String form() {
		
		log.info("여기서 작업중");
		return "emp/hrm/empnotice/empNoticeForm";
	}
	
	@PostMapping(value = "/emp/hrm/empnotice/insert")
	public String insert(
			@ModelAttribute EmpNoticeVO cmdObj
			, Principal principal
			, @EmpUser EmpVO authEmp
			) {
		
		String newEmpNtNo = service.createEmpNotice(cmdObj);
		return "redirect:/emp/hrm/empnotice/"+newEmpNtNo;
	}
	
	
	
	@RequestMapping("/emp/hrm/empnotice/update")
	public String update() {
		return "emp/hrm/empnotice/empNoticeEdit";
	}
	
	@RequestMapping(value="/emp/hrm/empnotice")
	public String list(
			@RequestParam(name="page", required =false, defaultValue="1") int currentPage
			, Model model
			, @RequestParam Map<String, Object> detailCondition
	) {
		PaginationInfo paging = new PaginationInfo(3,3);
		paging.setCurrentPage(currentPage);
		paging.setDetailCondition(detailCondition);
		List<EmpNoticeVO> empNoticeList = service.retrieveEmpNoticeList(paging);
		
		PaginationRenderer renderer = new BootstrapFormBasePaginationRenderer("#searchForm");
		
		String pagingHTML = renderer.renderPagination(paging);
		
		//empNoticeList = null; //조건에 맞는 공지 없음 확인용
		
		
		log.info("detailCondition : {}",detailCondition );
		
		model.addAttribute("empNoticeList", empNoticeList);
		model.addAttribute("pagingHTML", pagingHTML);
		model.addAttribute("condition", detailCondition);
		
		return "emp/hrm/empnotice/empNoticeList";
	}
	
	@RequestMapping(value  = "/emp/hrm/empnotice/{empNtNo}", method = RequestMethod.POST)
	public String delete(
			@ModelAttribute EmpNoticeVO cmdObj
			, Principal principal
			, @EmpUser EmpVO authEmp
	) {
		service.removeEmpNotice(cmdObj);
//		return "";
		return "redirect:/emp/hrm/empnotice";
	}
	
	
	
	@GetMapping("/emp/hrm/empnotice/{empNtNo}")
	public String view(@PathVariable String empNtNo, Model model) {
		EmpNoticeVO empNt = service.retrieveEmpNotice(empNtNo);
		model.addAttribute("empNt", empNt);
		log.info("직원 공지 코드 번호 : {}", empNtNo);
		return "emp/hrm/empnotice/empNoticeView";
	}
	
	
}
